<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NoobCoder</title>
    <link>http://noobcoderr.github.io/</link>
    <description>Recent content on NoobCoder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 19 May 2021 23:11:43 +0800</lastBuildDate>
    
	<atom:link href="http://noobcoderr.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2021年5月计划</title>
      <link>http://noobcoderr.github.io/post/2021_05_planings/</link>
      <pubDate>Wed, 19 May 2021 23:11:43 +0800</pubDate>
      
      <guid>http://noobcoderr.github.io/post/2021_05_planings/</guid>
      <description>要总结的系列 《Python热更的原理与应用》 《Python元类的原理与应用》 要思考清楚的问题 如何整理现有系统的全部信息 如何接手/上手一个新项</description>
    </item>
    
    <item>
      <title>golang如何实现并发</title>
      <link>http://noobcoderr.github.io/post/question_a_dat_202004121/</link>
      <pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://noobcoderr.github.io/post/question_a_dat_202004121/</guid>
      <description>Golang如何实现并发？ 头脑风暴 老生常谈，什么是并发？什么是并行？ 进程、线程、协程的区别，goroutine属于哪一种，为什么？ 为什么说g</description>
    </item>
    
    <item>
      <title>每日一问</title>
      <link>http://noobcoderr.github.io/post/question_a_day_20200412/</link>
      <pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://noobcoderr.github.io/post/question_a_day_20200412/</guid>
      <description>每日一问 golang的channel取值问题 golang的野指针问题 golang的数据类型以及内存占用问题 golang有其基本类型以及复合类</description>
    </item>
    
    <item>
      <title>Golang基础包-Context</title>
      <link>http://noobcoderr.github.io/post/golang_context/</link>
      <pubDate>Wed, 09 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>http://noobcoderr.github.io/post/golang_context/</guid>
      <description>背景 学一门知识总时得带着目的来学，不然漫无目的的学，很容易做无用功。最近在项目中使用Time包内的ratelimit模块实现请求限流时用到了</description>
    </item>
    
    <item>
      <title>乐理基本入门-七种基本音的快速记忆</title>
      <link>http://noobcoderr.github.io/post/music_basic/</link>
      <pubDate>Wed, 09 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>http://noobcoderr.github.io/post/music_basic/</guid>
      <description>为啥要捣鼓乐器 别问，问就是高逼格、陶冶情操。其实没那么高，也就是自己平时爱听歌，平时也偶尔哼唱、吹口哨、KTV唱几句，这都是我对音乐的表现形</description>
    </item>
    
    <item>
      <title>计划要做/待办清单/每日奇想</title>
      <link>http://noobcoderr.github.io/post/todolist/</link>
      <pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://noobcoderr.github.io/post/todolist/</guid>
      <description>计划要做/待办清单/每日奇想 其实就是记录间歇性凌云壮志时产生的想法。 2019-09-24 变白，指定变白 计划 2019-09-27 统一日志服务。分布式跟踪日志系统 Golang反射应</description>
    </item>
    
    <item>
      <title>如何变白</title>
      <link>http://noobcoderr.github.io/post/becomewhite/</link>
      <pubDate>Mon, 23 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://noobcoderr.github.io/post/becomewhite/</guid>
      <description>男孩子如何变白？ 我有一个朋友，肤色黝黑，说想要变白点，让我帮忙调研一下方法。没错，这个朋友，就是我自己。 为啥要变白？ 丑呗，丑没办法变好看，只</description>
    </item>
    
    <item>
      <title>程序员述职该怎么写？</title>
      <link>http://noobcoderr.github.io/post/workreport/</link>
      <pubDate>Mon, 23 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://noobcoderr.github.io/post/workreport/</guid>
      <description>技术/程序员如何述职？ 试用期马上就要到了，之前已经进行过了一次中期述职，表现的一般，甚至有的栏被打了C，明明每天都很忙碌啊，工作也饱和，但是</description>
    </item>
    
    <item>
      <title>工作中遇到的并发</title>
      <link>http://noobcoderr.github.io/post/work_concurrent/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://noobcoderr.github.io/post/work_concurrent/</guid>
      <description>场景描述 业务中需要获取token，获取token是个公共服务，获取token流程为 首先去redis内查是否存在且没过期，有则直接返回， 如果没</description>
    </item>
    
    <item>
      <title>API知识梳理汇总</title>
      <link>http://noobcoderr.github.io/post/api/</link>
      <pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://noobcoderr.github.io/post/api/</guid>
      <description>背景 为啥会想到要整理api的知识呢？因为时常感叹自己天天写接口API，天天CRUD，感觉技术得不到进步，总想去搞什么时下热门的技术，像微服务</description>
    </item>
    
    <item>
      <title>操作系统学习笔记-操作系统概述</title>
      <link>http://noobcoderr.github.io/post/os_os/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://noobcoderr.github.io/post/os_os/</guid>
      <description>操作系统概述 如果让我不做准备来描述操作系统，我可能会想到 IOS、Android、macOS、Linux、Unix、Windows这些名词， 再</description>
    </item>
    
    <item>
      <title>软件工程之美学习-基础理论</title>
      <link>http://noobcoderr.github.io/post/bos_basic2/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://noobcoderr.github.io/post/bos_basic2/</guid>
      <description>到底该如何理解软件工程 软件：即我们日常生活中使用的qq、微信、chorme等 工程：多人参与、有计划、有步骤地完成一件事，即可成为工程。 软件工</description>
    </item>
    
    <item>
      <title>操作系统学习笔记-计算机系统概述</title>
      <link>http://noobcoderr.github.io/post/os_cs/</link>
      <pubDate>Sun, 15 Sep 2019 22:19:48 +0800</pubDate>
      
      <guid>http://noobcoderr.github.io/post/os_cs/</guid>
      <description>背景 回到学习方法论，学习任何知识点，都需要先搞清楚其背景知识，有了上下文，学习起来才可以更连贯，更好理解。 计算机系统概述 操作系统连接了计算机</description>
    </item>
    
    <item>
      <title>软件工程之美学习-基础学习篇1</title>
      <link>http://noobcoderr.github.io/post/basicknow/</link>
      <pubDate>Sun, 15 Sep 2019 18:15:23 +0800</pubDate>
      
      <guid>http://noobcoderr.github.io/post/basicknow/</guid>
      <description>前言 软件工程是一种思想，是我们进行软件开发过程中的方法论。 该系列文章为即可时间的课程《软件工程之美》的学习总结笔记。 为何要学好软件工程 不学习</description>
    </item>
    
    <item>
      <title>软件工程之美学习笔记-运行维护篇</title>
      <link>http://noobcoderr.github.io/post/ops/</link>
      <pubDate>Sun, 15 Sep 2019 18:14:29 +0800</pubDate>
      
      <guid>http://noobcoderr.github.io/post/ops/</guid>
      <description>待续&amp;hellip;</description>
    </item>
    
    <item>
      <title>软件工程之美学习笔记-软件测试篇</title>
      <link>http://noobcoderr.github.io/post/softtest/</link>
      <pubDate>Sun, 15 Sep 2019 18:13:57 +0800</pubDate>
      
      <guid>http://noobcoderr.github.io/post/softtest/</guid>
      <description>待续&amp;hellip;</description>
    </item>
    
    <item>
      <title>软件工程之美学习笔记-开发编码篇</title>
      <link>http://noobcoderr.github.io/post/devcode/</link>
      <pubDate>Sun, 15 Sep 2019 18:13:39 +0800</pubDate>
      
      <guid>http://noobcoderr.github.io/post/devcode/</guid>
      <description>待续</description>
    </item>
    
    <item>
      <title>软件工程之美学习笔记-系统设计篇</title>
      <link>http://noobcoderr.github.io/post/sysdesign/</link>
      <pubDate>Sun, 15 Sep 2019 18:13:21 +0800</pubDate>
      
      <guid>http://noobcoderr.github.io/post/sysdesign/</guid>
      <description>待续&amp;hellip;</description>
    </item>
    
    <item>
      <title>软件工程之美学习笔记-需求分析篇</title>
      <link>http://noobcoderr.github.io/post/needanalysis/</link>
      <pubDate>Sun, 15 Sep 2019 18:12:52 +0800</pubDate>
      
      <guid>http://noobcoderr.github.io/post/needanalysis/</guid>
      <description>待续&amp;hellip;</description>
    </item>
    
    <item>
      <title>软件工程之美学习笔记-项目规划篇</title>
      <link>http://noobcoderr.github.io/post/projplaning/</link>
      <pubDate>Sun, 15 Sep 2019 18:07:32 +0800</pubDate>
      
      <guid>http://noobcoderr.github.io/post/projplaning/</guid>
      <description>待续&amp;hellip;</description>
    </item>
    
    <item>
      <title>我的书单</title>
      <link>http://noobcoderr.github.io/post/mybooklist/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://noobcoderr.github.io/post/mybooklist/</guid>
      <description>我的书单 众所周知，书籍买了就相当于看了。 调侃归调侃，优秀的书籍还是得买的，也得逼着自己去看。 我已拥有的 去年双十一买，已勾选代表已读完 技术类 《</description>
    </item>
    
    <item>
      <title>修炼“程序”的心酸</title>
      <link>http://noobcoderr.github.io/post/coderrod/</link>
      <pubDate>Sat, 14 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://noobcoderr.github.io/post/coderrod/</guid>
      <description>修炼程序的心酸 其实，我算不算一名真正的程序员，我只不过是一个会一门变成语言的码农罢了，而且这个会，也没多会，就是看了个教程，勉强会用的会而已</description>
    </item>
    
    <item>
      <title>变的精致</title>
      <link>http://noobcoderr.github.io/post/becomejz/</link>
      <pubDate>Sat, 14 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://noobcoderr.github.io/post/becomejz/</guid>
      <description>精致的我 男孩子为啥不可以变的精致，我不要30岁变成中年油腻男，我要变的精致，并一直精致。 先使外在变的干净整洁吧 1、头发 2、穿搭 3、皮肤 4、塑</description>
    </item>
    
    <item>
      <title>我的“方法论”</title>
      <link>http://noobcoderr.github.io/post/mymethodology/</link>
      <pubDate>Sat, 14 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://noobcoderr.github.io/post/mymethodology/</guid>
      <description>我的方法论 试用期这2个月，感觉在思想上的提升大于在技术上的提升。 技术上由于处理的多为业务事项，只要完成第一项，那么后面的大多为&amp;quot;复</description>
    </item>
    
    <item>
      <title>聊聊 “三观”</title>
      <link>http://noobcoderr.github.io/post/myvalue/</link>
      <pubDate>Sat, 14 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://noobcoderr.github.io/post/myvalue/</guid>
      <description>前言 为什么会想到写这个，是因为经常看微博，比较关注国际政治、历史、女权、贸易战、香港反送中等等事件，可以说是涉及到了历史、经济、政治、社会学</description>
    </item>
    
    <item>
      <title>如何写博客呢？</title>
      <link>http://noobcoderr.github.io/post/test5/</link>
      <pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://noobcoderr.github.io/post/test5/</guid>
      <description>写博客该怎么写 背景 最近在写一些博客，有些是阅读笔记，有些是自己遇到的问题，有的则是一些实践记录。 在写作的过程中，也是总结了出了一点点学习和写</description>
    </item>
    
    <item>
      <title>并发</title>
      <link>http://noobcoderr.github.io/post/concurrent/</link>
      <pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://noobcoderr.github.io/post/concurrent/</guid>
      <description>并发 920更新：并行：4个核心同时跑着4个进程。可以说这4个进程在并行。就像4匹马并排在跑 并发就是1个核心同时跑4个进程。关键词，1个核心、</description>
    </item>
    
    <item>
      <title>汇编语言的简单学习与入门</title>
      <link>http://noobcoderr.github.io/post/aseemblylanguage/</link>
      <pubDate>Sat, 07 Sep 2019 23:39:43 +0800</pubDate>
      
      <guid>http://noobcoderr.github.io/post/aseemblylanguage/</guid>
      <description>汇编语言的简单学习与入门 什么是汇编语言(什么是汇编) 我的最初理解 学一个新的知识，先别着急直接看，可以先说说自己的理解，疑问，然后带着自己的理</description>
    </item>
    
    <item>
      <title>Https原理及双向数字验证</title>
      <link>http://noobcoderr.github.io/post/https/</link>
      <pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://noobcoderr.github.io/post/https/</guid>
      <description>HTTPS原理及双向数字验证 前言 ​ 一说到加密验证，就涉及到很多的名词与其对应的知识比如对称、非对称加密、公钥、私钥、CA、数字证书、数字签名</description>
    </item>
    
    <item>
      <title>hugo博客使用持续集成工具travis-ci</title>
      <link>http://noobcoderr.github.io/post/test_travis_ci/</link>
      <pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://noobcoderr.github.io/post/test_travis_ci/</guid>
      <description>hugo博客使用持续集成工具travis-ci 遇到的几个坑 1、 global: ​ Github Pages ​ GH_REF: github.com/noobcoderr/noobcoderr.github.io.git ​ GH_REF 后的链接加了个https，导致ci时没有access 2、 travis ci</description>
    </item>
    
    <item>
      <title>软件工程之美学习笔记-软件工程经典案例</title>
      <link>http://noobcoderr.github.io/post/clasiccase/</link>
      <pubDate>Sun, 25 Aug 2019 23:57:16 +0800</pubDate>
      
      <guid>http://noobcoderr.github.io/post/clasiccase/</guid>
      <description>为什么程序员的业余项目都死了？ 我先说说我自己的吧，大学时也是有过好几个idea的，并且有一个拿来参加了全国大学生创新创业大赛，但是后面还是死</description>
    </item>
    
    <item>
      <title>使用Hugo &#43; Github Page构建自己的个人博客</title>
      <link>http://noobcoderr.github.io/post/hugoblog/</link>
      <pubDate>Fri, 23 Aug 2019 00:50:49 +0800</pubDate>
      
      <guid>http://noobcoderr.github.io/post/hugoblog/</guid>
      <description>使用Hugo + Github Page构建自己的个人博客 前言 个人博客折腾历程 开始自学编程，意识到要用博客记录一些自己的学习笔记、遇到的问题、以及解决办法等</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://noobcoderr.github.io/post/fst-post/</link>
      <pubDate>Thu, 22 Aug 2019 00:34:58 +0800</pubDate>
      
      <guid>http://noobcoderr.github.io/post/fst-post/</guid>
      <description>Hello World 欢迎 Golang相关 面向信仰编程 Golang 博客有深度，很多都是从源码讲起，需要一定的基础 飞雪无情的博客 Golang 比较基础，知识点循序渐进，适合初级go程</description>
    </item>
    
    <item>
      <title></title>
      <link>http://noobcoderr.github.io/post/api_design_style/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://noobcoderr.github.io/post/api_design_style/</guid>
      <description>API设计风格之RESTful和RPC风格 最近几件事让我对API的设计风格有了更多的认识。
1、开发谷歌支付后端时，需要调用谷歌billing库对谷歌订单进行确认操作，这样用户三天之内就无法退款了，该接口描述是If successful, this method returns an empty response body. 一开始我以为是调用成功是返回status200，如果成功则是空body，失败则是包含具体错误信息的json，但是后来发现成功是204和空body，失败是4xx系列错误和包含错误信息的jsonbody，当时还理解不了为什么这么设计。
2、在看一门golang的视频教程的时候，视频一开始就进行API设计，其实讲的就是REST风格的设计。
之前的疑惑，顿时有了茅塞顿开的感觉，从最开始的时候不知道什么是RESTful风格，到后懵懂的觉得应该是用各种http方法来执行请求，再到后来的基于资源的请求，让我慢慢的解开了之前的一些疑惑，并且，加深了我对HTTP状态码的理解(记得之前校招面一次看一次，过不久就忘了)，之前都是200，然后成功/错误信息全放里面。
搜了搜REST风格的详情之后，发现还有些其他常见的API风格，如RPC，GraphQL等，而自己目前写的起始就是RPC风格的API，其实哪一种好哪一种不好，目前我也谈不上，暂且记录和总结一下自己看过的文章吧。
RPC风格 最常见，面向过程
REST风格 逐渐变的多了起来，面向资源
GraphQL风格 联想一下ES的查询接口，就是这个风格，查询放body里面
总结 其实没必要死磕哪一种风格，哪一种风格最匹配当前的业务场景，就用哪一种。
参考文章   RESTful API 最佳实践
  API设计中关于RPC和REST 两种风格选择的个人理解
  浅谈三种API设计风格RPC、REST、GraphQL
  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://noobcoderr.github.io/post/target/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://noobcoderr.github.io/post/target/</guid>
      <description>学习计划 方向 云原生 &amp;gt; Saas &amp;gt; docker/k8s &amp;gt; 后端
计划 基础向 1、计算机网络、http、https、tcp/ip
2、数据结构：数组、链表、树、图
3、算法：排序、搜索、
4、设计模式
进阶向 源码阅读
1、golang基础包源码阅读(io map interface goroutine channels )
GO标准语言库
2、golang框架源码阅读：echo、docker、grpc、consul、nats
3、go应用项目
案例
以上在家完成基础的计网和算法数据结构
在公司则可以看看进阶向。
明天出更详细计划
比如每个项目，内知识结构，再细化安排时间。到每一天。
参考  一年经验跳槽  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://noobcoderr.github.io/post/timewheel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://noobcoderr.github.io/post/timewheel/</guid>
      <description>造轮子之时间轮算法的原理与实现 背景 前不久在做一个内部错误日志告警的工具服务，具体工作是定时去es内检索项目下的错误日志，并且将返回的内容告警到顶顶群内。其中涉及到了定时任务，当时我的做法是为每个项目创建一个timer，然后按一定时间周期性的执行。这个是我能想到的 最笨的办法，大哥说我这个太耗性能，项目组多的时候，得起多少个定时器啊。并且给我介绍了时间轮的概念。
后来调研了下该算法后，发现挺优雅的，于是写下该篇文章记录一下调研到的知识，并且用自己擅长的语言给这个算法造个轮子。我的目标是多实现使用到的工具或算法，通过造轮子来提升编程能力。(不是重复发明轮子)
时间轮 想象一下，我们每天9点半上班，那么会定8点50的闹钟，当时间走到8点50分的时候，闹钟响，然后我们起床、穿衣、洗漱、整理、出门走到公司，我们像是把一个定时任务给插入到了8点50这一个刻度了，每天8点50，闹钟响，我们执行该刻度上的任务。
时间轮是什么 时间轮是一种算法。用于定时器，可以非常优雅地执行定时任务。
为什么要用时间轮 时间轮的分类 基本时间轮
分层时间轮
参考文章  算法-时间轮  </description>
    </item>
    
  </channel>
</rss>